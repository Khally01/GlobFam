// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  passwordHash      String
  firstName         String
  lastName          String
  avatar            String?
  emailVerified     Boolean   @default(false)
  emailVerificationToken String?
  passwordResetToken     String?
  passwordResetExpires   DateTime?
  
  // Profile
  dateOfBirth       DateTime?
  phoneNumber       String?
  preferredCurrency Currency  @default(USD)
  timezone          String    @default("UTC")
  language          String    @default("en")
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastLoginAt       DateTime?
  
  // Relations
  families          FamilyMember[]
  accounts          Account[]
  transactions      Transaction[]
  goals             Goal[]
  notifications     Notification[]
  sessions          Session[]
  
  @@index([email])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
}

// Family Management
model Family {
  id                String         @id @default(cuid())
  name              String
  description       String?
  primaryCurrency   Currency       @default(USD)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  members           FamilyMember[]
  goals             Goal[]
  budgets           Budget[]
}

model FamilyMember {
  id                String         @id @default(cuid())
  userId            String
  familyId          String
  role              FamilyRole     @default(MEMBER)
  nickname          String?
  joinedAt          DateTime       @default(now())
  
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  family            Family         @relation(fields: [familyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, familyId])
  @@index([familyId])
}

// Financial Accounts
model Account {
  id                String         @id @default(cuid())
  userId            String
  name              String
  type              AccountType
  currency          Currency
  balance           Decimal        @db.Decimal(15, 2)
  isActive          Boolean        @default(true)
  
  // External Integration
  plaidAccountId    String?
  plaidAccessToken  String?
  lastSyncedAt      DateTime?
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions      Transaction[]
  
  @@index([userId])
}

// Transactions
model Transaction {
  id                String         @id @default(cuid())
  userId            String
  accountId         String
  categoryId        String?
  
  amount            Decimal        @db.Decimal(15, 2)
  currency          Currency
  type              TransactionType
  status            TransactionStatus @default(COMPLETED)
  
  description       String
  notes             String?
  date              DateTime
  
  // External data
  plaidTransactionId String?
  merchantName       String?
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  account           Account        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category          Category?      @relation(fields: [categoryId], references: [id])
  
  @@index([userId])
  @@index([accountId])
  @@index([date])
}

// Categories
model Category {
  id                String         @id @default(cuid())
  name              String
  icon              String?
  color             String?
  type              TransactionType
  isSystem          Boolean        @default(false)
  parentId          String?
  
  parent            Category?      @relation("CategoryToCategory", fields: [parentId], references: [id])
  children          Category[]     @relation("CategoryToCategory")
  transactions      Transaction[]
  budgetItems       BudgetItem[]
  
  @@index([type])
}

// Goals
model Goal {
  id                String         @id @default(cuid())
  userId            String
  familyId          String?
  name              String
  description       String?
  targetAmount      Decimal        @db.Decimal(15, 2)
  currentAmount     Decimal        @db.Decimal(15, 2) @default(0)
  currency          Currency
  targetDate        DateTime
  status            GoalStatus     @default(ACTIVE)
  priority          Int            @default(1)
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  completedAt       DateTime?
  
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  family            Family?        @relation(fields: [familyId], references: [id])
  
  @@index([userId])
  @@index([familyId])
}

// Budgets
model Budget {
  id                String         @id @default(cuid())
  familyId          String
  name              String
  period            BudgetPeriod
  startDate         DateTime
  endDate           DateTime
  isActive          Boolean        @default(true)
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  family            Family         @relation(fields: [familyId], references: [id], onDelete: Cascade)
  items             BudgetItem[]
  
  @@index([familyId])
}

model BudgetItem {
  id                String         @id @default(cuid())
  budgetId          String
  categoryId        String
  amount            Decimal        @db.Decimal(15, 2)
  spent             Decimal        @db.Decimal(15, 2) @default(0)
  
  budget            Budget         @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  category          Category       @relation(fields: [categoryId], references: [id])
  
  @@unique([budgetId, categoryId])
}

// Notifications
model Notification {
  id                String         @id @default(cuid())
  userId            String
  type              NotificationType
  title             String
  message           String
  data              Json?
  isRead            Boolean        @default(false)
  createdAt         DateTime       @default(now())
  
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isRead])
}

// Currency Exchange Rates (cached)
model ExchangeRate {
  id                String         @id @default(cuid())
  fromCurrency      Currency
  toCurrency        Currency
  rate              Decimal        @db.Decimal(10, 6)
  source            String         @default("api")
  updatedAt         DateTime       @default(now())
  
  @@unique([fromCurrency, toCurrency])
  @@index([updatedAt])
}

// Enums
enum Currency {
  USD
  AUD
  MNT
  EUR
  GBP
  JPY
  CNY
  CAD
  NZD
  SGD
}

enum FamilyRole {
  ADMIN
  PARENT
  MEMBER
  CHILD
  VIEWER
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  LOAN
  CASH
  CRYPTO
  OTHER
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum NotificationType {
  TRANSACTION
  GOAL_PROGRESS
  BUDGET_ALERT
  FAMILY_INVITE
  SECURITY
  SYSTEM
}