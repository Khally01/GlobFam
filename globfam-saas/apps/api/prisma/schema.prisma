// This is your Prisma schema file
// Production-ready schema for GlobFam SaaS

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core User & Organization Models
model Organization {
  id                String           @id @default(cuid())
  name              String
  slug              String           @unique
  plan              PricingPlan      @default(STARTER)
  stripeCustomerId  String?          @unique
  billingEmail      String?
  trialEndsAt       DateTime?
  subscriptionId    String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  users             User[]
  families          Family[]
  assets            Asset[]
  transactions      Transaction[]
  subscriptions     Subscription[]
  
  @@index([plan])
  @@index([stripeCustomerId])
}

model User {
  id                String           @id @default(cuid())
  email             String           @unique
  name              String
  passwordHash      String?
  role              UserRole         @default(MEMBER)
  avatar            String?
  country           String           @default("AU")
  preferredCurrency String           @default("AUD")
  language          String           @default("en")
  timezone          String           @default("Australia/Sydney")
  
  organizationId    String
  organization      Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  familyId          String?
  family            Family?          @relation(fields: [familyId], references: [id])
  
  emailVerified     DateTime?
  twoFactorEnabled  Boolean          @default(false)
  lastLoginAt       DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  assets            Asset[]
  transactions      Transaction[]
  sessions          Session[]
  notifications     Notification[]
  documents         Document[]
  
  @@index([email])
  @@index([organizationId])
  @@index([familyId])
}

model Family {
  id                String           @id @default(cuid())
  name              String
  description       String?
  inviteCode        String           @unique @default(cuid())
  
  organizationId    String
  organization      Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  createdById       String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  members           User[]
  sharedAssets      Asset[]
  
  @@index([inviteCode])
  @@index([organizationId])
}

// Financial Models
model Asset {
  id                String           @id @default(cuid())
  name              String
  type              AssetType
  subtype           String?
  country           String
  currency          String
  amount            Decimal          @db.Decimal(20, 2)
  
  // Metadata based on asset type
  metadata          Json?            // Flexible field for type-specific data
  
  userId            String?
  user              User?            @relation(fields: [userId], references: [id])
  
  familyId          String?
  family            Family?          @relation(fields: [familyId], references: [id])
  
  organizationId    String
  organization      Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  lastSyncedAt      DateTime?
  dataSource        DataSource       @default(MANUAL)
  externalId        String?          // ID from bank/integration
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  transactions      Transaction[]
  valuations        Valuation[]
  
  @@index([userId])
  @@index([familyId])
  @@index([organizationId])
  @@index([type])
  @@index([country])
}

model Transaction {
  id                String           @id @default(cuid())
  type              TransactionType
  category          String
  amount            Decimal          @db.Decimal(20, 2)
  currency          String
  description       String?
  date              DateTime
  
  assetId           String
  asset             Asset            @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  userId            String
  user              User             @relation(fields: [userId], references: [id])
  
  organizationId    String
  organization      Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  externalId        String?          // ID from bank
  metadata          Json?
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([userId])
  @@index([assetId])
  @@index([date])
  @@index([category])
}

model Valuation {
  id                String           @id @default(cuid())
  assetId           String
  asset             Asset            @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  value             Decimal          @db.Decimal(20, 2)
  currency          String
  source            String           // e.g., "manual", "zillow", "realestate.com.au"
  date              DateTime
  
  createdAt         DateTime         @default(now())
  
  @@index([assetId])
  @@index([date])
}

// Subscription & Billing
model Subscription {
  id                String           @id @default(cuid())
  organizationId    String
  organization      Organization     @relation(fields: [organizationId], references: [id])
  
  stripeSubscriptionId String        @unique
  stripePriceId     String
  status            String
  currentPeriodEnd  DateTime
  cancelAtPeriodEnd Boolean         @default(false)
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([organizationId])
  @@index([status])
}

// Authentication & Security
model Session {
  id                String           @id @default(cuid())
  userId            String
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  token             String           @unique
  userAgent         String?
  ipAddress         String?
  expiresAt         DateTime
  
  createdAt         DateTime         @default(now())
  
  @@index([userId])
  @@index([token])
}

// Documents & Files
model Document {
  id                String           @id @default(cuid())
  name              String
  type              DocumentType
  url               String
  size              Int              // in bytes
  mimeType          String
  
  userId            String
  user              User             @relation(fields: [userId], references: [id])
  
  assetId           String?          // Optional link to asset
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@index([userId])
  @@index([type])
}

// Notifications
model Notification {
  id                String           @id @default(cuid())
  userId            String
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type              NotificationType
  title             String
  message           String
  data              Json?
  
  read              Boolean          @default(false)
  readAt            DateTime?
  
  createdAt         DateTime         @default(now())
  
  @@index([userId])
  @@index([read])
}

// Enums
enum PricingPlan {
  STARTER     // $9.99
  FAMILY      // $19.99
  PREMIUM     // $39.99
  ENTERPRISE  // Custom
}

enum UserRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum AssetType {
  CASH
  PROPERTY
  VEHICLE
  INVESTMENT
  CRYPTO
  SUPERANNUATION
  SOCIAL_INSURANCE
  DEBT
  OTHER
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum DataSource {
  MANUAL
  PLAID
  BASIQ
  CUSTOM_BANK
  IMPORT
}

enum DocumentType {
  PROPERTY_DEED
  BANK_STATEMENT
  TAX_RETURN
  VISA_DOCUMENT
  INSURANCE
  OTHER
}

enum NotificationType {
  PAYMENT_REMINDER
  VISA_ALERT
  PRICE_ALERT
  SECURITY_ALERT
  SYSTEM
}